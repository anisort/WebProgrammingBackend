openapi: 3.0.0
info:
  title: Categories and Products API
  version: 1.0.0
  description: API to manage categories and products with relationships.
servers:
  - url: http://localhost:3100/api/v1
    description: Main API Server

components:
  securitySchemes:
    keycloakAuthCode:
      type: oauth2
      description: Authentication via Keycloak — Authorization Code Flow
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8080/realms/horpynych/protocol/openid-connect/auth
          tokenUrl: http://localhost:8080/realms/horpynych/protocol/openid-connect/token
          scopes:
            openid: Access to basic user information

    keycloakClientCreds:
      type: oauth2
      description: Authentication via Keycloak — Client Credentials Flow
      flows:
        clientCredentials:
          tokenUrl: http://localhost:8080/realms/horpynych/protocol/openid-connect/token
          scopes:
            openid: Access to basic user information

  schemas:
    Meta:
      type: object
      properties:
        itemsPerPage:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 12
        currentPage:
          type: integer
          example: 2
        totalPages:
          type: integer
          example: 3
        sortBy:
          type: array
          items:
            type: array
            items:
              type: string
        search:
          type: string
          example: i
        filter:
          type: object
          properties:
            age:
              type: string
              example: "$gte:3"
    Links:
      type: object
      properties:
        first:
          type: string
          format: uri
        previous:
          type: string
          format: uri
        current:
          type: string
          format: uri
        next:
          type: string
          format: uri
        last:
          type: string
          format: uri
    Category:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
        description:
          type: string
          description: Description of the category
        image:
          type: string
          format: uri
        created_at:
          readOnly: true
          type: string
          format: date-time
        updated_at:
          readOnly: true
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
          format: uri
        category_id:
          type: integer
        created_at:
          readOnly: true
          type: string
          format: date-time
        updated_at:
          readOnly: true
          type: string
          format: date-time

paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          description: No categories found
        '500':
          description: Internal server error
    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: The created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{categoryId}/products:
    get:
      tags:
        - Categories
      summary: Get all products for a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/Meta'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          description: Not found

  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A specific category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      tags:
        - Categories
      summary: Update a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Categories
      summary: Delete a specific category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/Meta'
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: The created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A specific product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Products
      summary: Update a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - Products
      summary: Delete a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
